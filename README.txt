===Описание решения===

Проект реализует симуляцию рабочего дня в идеальном городе, где взаимодействуют банки, работники (Worker) и транжиры (Spender). Основные компоненты системы:

1. Банки (Bank) - выдают кредиты и принимают вклады;
2. Трудяги (Worker) - работают на транжир, накапливают деньги;
3. Транжиры (Spender) - нанимают трудяг, берут кредиты;
4. СМИ (Media) - выводят информацию о состоянии системы;
5. Справочная доска (HelpDesk) - централизованное хранилище информации.

Все параметры хранятся в файле city.properties в том же порядке, что и в задании.

Логика работы симуляции
- Инициализация
	Читается конфигурация (CityProperties).
	В классе конфигурации AppConfig создаются все необходимые бины, которые в дальнейшем будут добавлены в качестве зависимостей в другие классы.
	Создаются банки, трудяги и транжиры через фабрики в классе CityService в методе createCity().
	Все объекты регистрируются в HelpDesk.
	Затем потоки запускаются в классе SimulationService в методе startSimulation().

- Основной цикл
	Транжиры нанимают трудяг (Spender → Worker).
	Трудяги работают и получают зарплату.
	Если у транжир денег меньше, чем одна зарплата для рабочего, они идут в банк.
	Если у трудяг становится денег больше или столько же, сколько указано в лимите, они несут их в банк.

- Завершение
	Через workDayDuration главный поток останавливает все потоки.
	Выводится итоговый баланс.

Ключевые особенности:
- Использование Spring Boot для управления зависимостями
- Паттерн Abstract Factory для создания объектов
- Паттерн Singleton для HelpDesk
- Многопоточность с использованием ThreadPoolTaskExecutor
- Синхронизация через synchronized и wait-notify
- Конфигурация через application.properties

Технологии:
- Java 21
- Spring Boot 2.7.0
- Maven

===Инструкция по сборке===

Основные зависимости для сборки проекта прописаны в файле pom.xml, поэтому никакие дополнительные библиотеки вручную загружать не надо.
Для сборки необходимо открыть командную строку и там перейти в директорию проекта. Далее выполняется следующая последовательность команд:

1. mvn compile
2. mvn exec:java -Dexec.mainClass="org.jedi_bachelor.task.Main"

После выполнения первой команды появятся .class-файлы, а после второй сам проект будет запущен и результат его работы будет выведен в консоль.